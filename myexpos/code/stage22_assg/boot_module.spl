//load disk free list
loadi(61,2);

//load inode table (and user table)
loadi(59,3);
loadi(60,4);

//load library
loadi(63,13);
loadi(64,14);

//load exception
loadi(2,15);
loadi(3,16);

//load timer
loadi(4,17);
loadi(5,18);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load int 6
loadi(14,27);
loadi(15,28);

//load int7
loadi(16,29);
loadi(17,30);

//load int8
loadi(18,31);
loadi(19,32);

//load int 9 (exec)
loadi(20,33);
loadi(21,34);

//load int10
loadi(22,35);
loadi(23,36);

//load int11
loadi(24,37);
loadi(25,38);

//load int13
loadi(28,41);
loadi(29,42);

//load int14
loadi(30,43);
loadi(31,44);

//load int15
loadi(32,45);
loadi(33,46);

//load resource manager (module 0)
loadi(40,53);
loadi(41,54);


//load module 1 (process manager)
loadi(42,55);
loadi(43,56);

//load module 2 (memory manager)
loadi(44,57);
loadi(45,58);

//load device manager (module 4)
loadi(48,61);
loadi(49,62);

//load scheduler (module 5)
loadi(50,63);
loadi(51,64);

//load init
loadi(65,7);
loadi(66,8);

// -------------------------------------------------- //

//set memory free list

R0 = 0;
while(R0 < 76) do
    [MEMORY_FREE_LIST + R0] = 1;
    R0 = R0 + 1;
endwhile;
while(R0 < 128) do
    [MEMORY_FREE_LIST + R0] = 0;
    R0 = R0 + 1;
endwhile;
R0 = 128;
while(R0 < 144) do
    [MEMORY_FREE_LIST + R0] = 1;
    R0 = R0 + 1;
endwhile;
R0 = 76;
while(R0 < 83) do //These are the pages used for idle and init
    [MEMORY_FREE_LIST + R0] = 1;
    R0 = R0 + 1;
endwhile;
R0 = 0;

//Initialize system status table
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

//Initialize terminal status table
[TERMINAL_STATUS_TABLE] = 0;

//Initialize disk status table
[DISK_STATUS_TABLE] = 0;

//Initialize semaphore table
R0 = 0;
while(R0 < 32) do
    [SEMAPHORE_TABLE + 4*R0 + 0] = -1; //locking pid
    [SEMAPHORE_TABLE + 4*R0 + 1] = 0; //no: of sharing processes
    R0 = R0 + 1;
endwhile;

//Initialize page table for init

PTBR = PAGE_TABLE_BASE;
PTLR = 10;

[PTBR+20+0] = 63;
[PTBR+20+1] = "0100";
[PTBR+20+2] = 64;
[PTBR+20+3] = "0100";

[PTBR+20+4] = 78;
[PTBR+20+5] = "0110";
[PTBR+20+6] = 79;
[PTBR+20+7] = "0110";

[PTBR+20+8] = 65;
[PTBR+20+9] = "0100";
[PTBR+20+10] = 66;
[PTBR+20+11] = "0100";
[PTBR+20+12] = -1;
[PTBR+20+13] = "0000";
[PTBR+20+14] = -1;
[PTBR+20+15] = "0000";

[PTBR+20+16] = 76;
[PTBR+20+17] = "0110";
[PTBR+20+18] = 77;
[PTBR+20+19] = "0110";

//Process table entries for init
[PROCESS_TABLE+16+1] = 1;
[PROCESS_TABLE+16+4] = CREATED;
[PROCESS_TABLE+16+11] = 80; //User area
[PROCESS_TABLE+16+12] = 0; //kernel stack (offset)
[PROCESS_TABLE+16+13] = 8*512;  //user stack
[PROCESS_TABLE+16+14] = PAGE_TABLE_BASE+20; //PTBR
[PROCESS_TABLE+16+15] = 10; //PTLR

//Resorce table entries for init
R0 = (80+1)*512 - 16;
R1 = 0;
while(R1 < 16) do
    [R0 + R1] = -1;
    R1 = R1 + 1;
endwhile;
R1 = 0;

//disk map table entries for init
R0 = 2;
while(R0 < 10) do
    [DISK_MAP_TABLE + 10 + R0] = -1;
    R0 = R0 + 1;
endwhile;
R0 = 0;

[DISK_MAP_TABLE + 10 + 4] = 65;
[DISK_MAP_TABLE + 10 + 5] = 66;


//set every other process table entry to TERMINATED
R0 = 2;
while(R0 < 16) do
    [PROCESS_TABLE + 16*R0 + 4] = TERMINATED;
    R0 = R0 + 1;
endwhile;

R0 = 0;

//Stage 22 assignemnt 2
[MEMORY_FREE_LIST + 127] = 1;
[127*512 + 0] = 85; //Memory usage (pages)
[127*512 + 1] = 85; //Max memory usage (pages)
[127*512 + 2] = 0;  //No of disk accesses
[127*512 + 3] = 0;  //No of context switches
[SYSTEM_STATUS_TABLE + 2] = 43;


[76*512] = [65*512 + 1]; //init
return;
