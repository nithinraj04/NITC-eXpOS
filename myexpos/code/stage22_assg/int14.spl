alias user_sp R1;
user_sp = SP;

alias ret_addr R2;
ret_addr = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias syscall_num R3;
syscall_num = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias arg1 R4;
arg1 = [[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

alias arg2 R5;
arg2 = [[PTBR + 2*(user_sp-3)/512]*512 + (user_sp-3)%512];

alias pid R6;
pid = [SYSTEM_STATUS_TABLE + 1];

alias resource_table R7;
resource_table = ([PROCESS_TABLE + 16*pid + 11] + 1)*512 - 16;

[PROCESS_TABLE + 16*pid + 9] = syscall_num;

SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

//----------------fn definitions-------------------//

if(syscall_num == 19) then //semlock
    if(arg1 < 0 || arg1 >= 8) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    if([resource_table + 2*arg1] != SEMAPHORE) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;
    alias sem_table_index R8;
    sem_table_index = [resource_table + 2*arg1 + 1];

    while([SEMAPHORE_TABLE + 4*sem_table_index] != -1) do
        [PROCESS_TABLE + 16*pid + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + 16*pid + 5] = sem_table_index;

        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
        call SCHEDULER;
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
    endwhile;

    [SEMAPHORE_TABLE + 4*sem_table_index] = pid;
   
    R0 = 0;
    goto return_to_user;
endif;

if(syscall_num == 20) then //semunlock
    if(arg1 < 0 || arg1 >= 8) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    if([resource_table + 2*arg1] != SEMAPHORE) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias sem_table_index R8;
    sem_table_index = [resource_table + 2*arg1 + 1];

    if([SEMAPHORE_TABLE + 4*sem_table_index] != -1) then
        if([SEMAPHORE_TABLE + 4*sem_table_index] != pid) then
            [ret_addr] = -2;
            goto return_to_user;
        endif;

        [SEMAPHORE_TABLE + 4*sem_table_index] = -1;

        R9 = 0;
        while(R9 < 16) do
            R10 = PROCESS_TABLE + 16*R9;
            if(
                [R10 + 4] == WAIT_SEMAPHORE
                &&
                [R10 + 5] == sem_table_index
              )
            then
                
                [R10 + 4] = READY;
            endif;
            R9 = R9+1;
        endwhile;
    endif;
    
    [ret_addr] = 0;
    goto return_to_user;
endif;


return_to_user:
    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;
    ireturn;
