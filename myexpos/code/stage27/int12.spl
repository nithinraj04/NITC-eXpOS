alias user_sp R1;
user_sp = SP;

alias ret_addr R2;
ret_addr = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias syscall_num R3;  //28 for logout
syscall_num = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias pid R4;
pid = [SYSTEM_STATUS_TABLE + 1];

[PROCESS_TABLE + 16*pid + 9] = syscall_num;
[PROCESS_TABLE + 16*pid + 13] = user_sp;

SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

//----------------------fn def begins-------------------//

if(pid != 2) then
    [ret_addr] = -1;
    goto return_to_user;
endif;

multipush(R1, R2, R3, R4);
R1 = KILL_ALL; //5
R2 = pid;
call PROCESS_MANAGER;
multipop(R1, R2, R3, R4);

[PROCESS_TABLE + 16*pid + 4] = TERMINATED;

//Store entry IP in SP and reset SP of shell
[[PTBR + 2*8]*512] = [[PTBR + 2*4]*512 + 1];
[PROCESS_TABLE + 16*pid + 13] = 8*512;

//Wakeup login process
[PROCESS_TABLE + 16*1 + 4] = READY;

[SYSTEM_STATUS_TABLE + 0] = 0;  //kernel

//nothing to save
call SCHEDULER;
goto return_to_user;

//---------------------------------------------------------//

return_to_user:
    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;
    ireturn;
