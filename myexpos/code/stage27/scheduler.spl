alias curr_process R0;
curr_process = [SYSTEM_STATUS_TABLE+1];
R10 = curr_process;
multipush(BP);

R1 = PROCESS_TABLE + 16*curr_process; //efficiency

[R1 + 12] = SP%512;
//user stack has already been saved in timer interrupt
[R1 + 14] = PTBR;
[R1 + 15] = PTLR;

if([SYSTEM_STATUS_TABLE + 5] != 0) then  //Swapping happening
    R1 = PROCESS_TABLE + 16*SWAPPER_DAEMON;
    if([R1 + 4] == READY || [R1 + 4] == CREATED) then
        curr_process = SWAPPER_DAEMON;
    else
        curr_process = IDLE_PROCESS;
    endif;
else
    curr_process = (curr_process+1)%15;
    while(1 == 1) do  //Allahu Akbar (idle kaakum)
        R1 = PROCESS_TABLE + 16*curr_process;
        if([R1 + 6] == 0) then //Not swapped
            if([R1 + 4] == CREATED || [R1 + 4] == READY) then
                break;
            endif;
        endif;

        curr_process = (curr_process+1)%15;
    endwhile;

    if(curr_process == SHELL_PROCESS) then
        //This is my own implementation
        //To fix the issue that the shell won't wait
        //for its grand-children 
        R2 = 3;
        while(R2 < 15) do
            if([PROCESS_TABLE + 16*R2 + 4] == CREATED || [PROCESS_TABLE + 16*R2 + 4] == READY) then
                curr_process = R2;
                [PROCESS_TABLE + 16*2 + 4] = WAIT_PROCESS;
                [PROCESS_TABLE + 16*2 + 5] = curr_process;
                break;
            endif;

            R2 = R2 + 1;
        endwhile;
    endif;
endif;


R1 = PROCESS_TABLE + 16*curr_process; //efficiency

SP = 512*[R1 + 11] + [R1 + 12];
PTBR = [R1 + 14];
PTLR = [R1 + 15];

[SYSTEM_STATUS_TABLE + 1] = curr_process;

if([R1 + 4] == CREATED) then
    SP = [PROCESS_TABLE + 16*curr_process + 13];
    BP = [[PROCESS_TABLE + 16*curr_process + 11]*512]; //This value will be set by fork system call
    [R1 + 4] = RUNNING;
    [R1 + 9] = 0; //mode flag
    ireturn;
endif;

[R1 + 4] = RUNNING;
multipop(BP);
return;

