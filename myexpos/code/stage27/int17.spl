alias user_sp R1;
user_sp = SP;

alias ret_addr R2;
ret_addr = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias syscall_num R3;  //27 for login
syscall_num = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias arg1 R4;
arg1 = [[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

alias arg2 R5;
arg2 = [[PTBR + 2*(user_sp-3)/512]*512 + (user_sp-3)%512];

alias pid R6;
pid = [SYSTEM_STATUS_TABLE + 1];

[PROCESS_TABLE + 16*pid + 9] = syscall_num;
[PROCESS_TABLE + 16*pid + 13] = user_sp;

SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

//-----------------fn def starts------------------------//

if(pid != 1) then  //Not called from login shell
    [ret_addr] = -2;
    goto return_to_user;
endif;

R7 = 0;
while(R7 < MAX_USER_NUM) do
    if([USER_TABLE + 2*R7] == arg1) then
        break;
    endif;
    R7 = R7 + 1;
endwhile;

if(R7 >= MAX_USER_NUM) then
    [ret_addr] = -1;
    goto return_to_user;
endif;

encrypt arg2;

if([USER_TABLE + 2*R7 + 1] != arg2) then
    [ret_addr] = -1;
    goto return_to_user;
endif;

//preparing shell process
[PROCESS_TABLE + 16*2 + 3] = R7;
[PROCESS_TABLE + 16*2 + 4] = CREATED;

//Login process waits for the shell
[PROCESS_TABLE + 16*pid + 4] = WAIT_PROCESS;
[PROCESS_TABLE + 16*pid + 5] = 2;

[SYSTEM_STATUS_TABLE + 0] = R7;

multipush(R1, R2, R3, R4, R5, R6, R7);
call SCHEDULER;
multipop(R1, R2, R3, R4, R5, R6, R7);

goto return_to_user;

//--------------------------------------------------------//

return_to_user:
    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;
    ireturn;
