//Set mode flag
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 5;

alias user_stack R1;
R1 = SP;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13] = SP;

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11]*512 - 1;

alias sys_call_num R2;
alias arg1 R3;
alias arg2 R4;
alias ret_addr R5;

arg2 = [512*[PTBR + 2*(user_stack-3)/512] + (user_stack-3)%512];
arg1 = [512*[PTBR + 2*(user_stack-4)/512] + (user_stack-4)%512];
sys_call_num = [512*[PTBR + 2*(user_stack-5)/512] + (user_stack-5)%512];
ret_addr = [PTBR + 2*(user_stack-1)/512]*512 + (user_stack-1)%512;

alias pid R6;
pid = [SYSTEM_STATUS_TABLE + 1];

if(arg1 == -2) then //write to terminal
    multipush(R1, R2, R3, R4, R5, R6);
    R1 = 3; //terminal write
    R2 = pid; //pid is R6
    R3 = arg2;  //arg2 is R4
    call DEVICE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6);
    
    [ret_addr] = 0;
    goto return_to_user;

else               //write to file
    if(arg1 < 0 || arg1 >= 8) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias resource_table R7;
    resource_table = [PROCESS_TABLE + 16*pid + 11]*512 + RESOURCE_TABLE_OFFSET;

    if([resource_table + 2*arg1] != FILE) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias open_file_index R8;
    open_file_index = [resource_table + 2*arg1 + 1];
    
    alias inode_index R9;
    inode_index = [OPEN_FILE_TABLE + 4*open_file_index];

    //-------------deviation from roadmap. Proceed with caution------------//
    if(inode_index == INODE_ROOT) then
        [ret_addr] = -3;
        goto return_to_user;
    endif;
    //------------------------end of deviation----------------------------//

    if([INODE_TABLE + 16*inode_index + 4] == 0) then //exclusive access
        if(
            [INODE_TABLE + 16*inode_index + 3] != [SYSTEM_STATUS_TABLE + 0]
            &&
            [SYSTEM_STATUS_TABLE + 0] != 1
        ) then
            [ret_addr] = -3;
            goto return_to_user;
        endif;
    endif;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
    R1 = 4;  //acquire inode
    R2 = inode_index;
    R3 = pid;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

    if(R0 == -1) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias lseek R10;
    lseek = [OPEN_FILE_TABLE + 4*open_file_index + 2];

    if(lseek >= MAX_FILE_SIZE) then
        [ret_addr] = -2;
        goto return_to_user;
    endif;
    

    if(lseek%512 == 0 && lseek == [INODE_TABLE + 16*inode_index + 2]) then
        //we need to allocate new disk block
        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
        R1 = 3; //get free block
        call MEMORY_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

        if(R0 == -1) then
           [ret_addr] = -2;
           goto return_to_user;
        endif;

        [INODE_TABLE + 16*inode_index + 8 + (lseek/512)] = R0;
    endif;

    R11 = lseek/512;
    R12 = lseek%512;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
    R1 = 1; //buffer write
    R2 = [INODE_TABLE + 16*inode_index + 8 + R11];
    R3 = R12;
    R4 = arg2;  //arg2 was R4
    call FILE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);

    if(lseek == [INODE_TABLE + 16*inode_index + 2]) then
        R13 = INODE_TABLE + 16*inode_index + 2;
        [R13] = [R13] + 1;  //increment filesize in inode table

        R13 = ROOT_FILE + 8*inode_index + 1;
        [R13] = [R13] + 1;  //increment filesize in root file
    endif;

    [OPEN_FILE_TABLE + 4*open_file_index + 2] = lseek + 1;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
    R1 = 5;  //release inode
    R2 = inode_index;
    R3 = pid;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

    [ret_addr] = 0;
    goto return_to_user;
endif;


return_to_user:
    SP = user_stack;
    [PROCESS_TABLE + 16*pid + 9] = 0;
    ireturn;
