//alias curr_pid R0;
//curr_pid = [SYSTEM_STATUS_TABLE+1];

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13] = SP;
SP = 512 * [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE+1] + 11]; //Don't really need the offset

backup;

//-------------------Stage 27 stuff---------------------//
if([SYSTEM_STATUS_TABLE + 5] != 0) then  //swapping initiated
    if([SYSTEM_STATUS_TABLE + 1] == SWAPPER_DAEMON) then
        R1 = [SYSTEM_STATUS_TABLE + 5];  //Swap in or swap out
        call PAGER_MODULE;
    endif;
else
    if([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then
        [SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
    else
        multipush(R1, R2, R3, R4);
        R1 = -1;
        R4 = -1;  //indicate whether there is a swapped out process
        R2 = 3;
        while(R2 < 15) do
            R3 = PROCESS_TABLE + 16*R2;
            if([R3 + 6] == 1) then
                R4 = 1;
                if([R3 + 0] > MAX_TICK) then
                    R1 = R2;
                    break;
                endif;
            endif;

            inline "INR R2";
        endwhile;

        if(R1 != -1 || (R4 == 1 && [SYSTEM_STATUS_TABLE + 2] > MEM_HIGH)) then
            [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
        endif;
        multipop(R1, R2, R3, R4);
    endif;
endif;

//---------------end of stage 27 stuff-----------------------//


[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 4] = READY;

//Increment tick for every process
multipush(R1, R2);
R1 = 0;
while(R1 < 16) do
    R2 = PROCESS_TABLE + 16*R1;
    [R2] = [R2] + 1;
    
    inline "INR R1";
endwhile;
multipop(R1, R2);

call SCHEDULER;

restore;

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;

ireturn;
