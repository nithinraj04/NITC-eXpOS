// load idle code
loadi(69,11);
loadi(70,12);

//load int7
loadi(16,29);
loadi(17,30);

// load init code
loadi(65,7);
loadi(66,8);

// load int10
loadi(22,35);
loadi(23,36);

// load exception handler
loadi(2,15);
loadi(3,16);

// load library code // change
loadi(63,13);
loadi(64,14);

//load timer
loadi(4,17);
loadi(5,18);

PTBR=PAGE_TABLE_BASE;
PTLR=10; //change

//Page table 0 is for idle
//Page table 1 is for init

[PTBR+0] = 63;
[PTBR+1] = "0100";  // Ref Valid Write Dirty
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//Definition for init starts

[PTBR+20+0] = 63;
[PTBR+20+1] = "0100";  // Ref Valid Write Dirty
[PTBR+20+2] = 64;
[PTBR+20+3] = "0100";

[PTBR+20+4] = 78;
[PTBR+20+5] = "0110";
[PTBR+20+6] = 79;
[PTBR+20+7] = "0110";

[PTBR+20+8] = 65;
[PTBR+20+9] = "0100";
[PTBR+20+10] = 66;
[PTBR+20+11] = "0100";
[PTBR+20+12] = -1;
[PTBR+20+13] = "0000";
[PTBR+20+14] = -1;
[PTBR+20+15] = "0000";

[PTBR+20+16] = 76;
[PTBR+20+17] = "0110";
[PTBR+20+18] = 77;
[PTBR+20+19] = "0110";

//Page table entries for idle

[PROCESS_TABLE+11] = 82;
[PROCESS_TABLE+4] = CREATED;
[PROCESS_TABLE+1] = 0;
[PROCESS_TABLE+13] = 8*512;
[PROCESS_TABLE+12] = 0;
[PROCESS_TABLE+14] = PAGE_TABLE_BASE;
[PROCESS_TABLE+15] = 10;

//Page table entries for init

[PROCESS_TABLE+16+11] = 80;
[PROCESS_TABLE+16+4] = RUNNING;
[PROCESS_TABLE+16+1] = 1;
[PROCESS_TABLE+16+13] = 8*512;  //user stack
[PROCESS_TABLE+16+12] = 0; //kernel stack
[PROCESS_TABLE+16+14] = PAGE_TABLE_BASE+20; //PTBR
[PROCESS_TABLE+16+15] = 10;

[SYSTEM_STATUS_TABLE+1] = 1;

//[76*512] = 0;  // set TOS ka value to 0
//SP = 2*512;  // TOS is logical page 2 (3rd page)

[76*512] = [65*512 + 1];
SP = 8*512;
PTBR = PAGE_TABLE_BASE+20;

[81 * 512] = [69*512 + 1];

ireturn;

