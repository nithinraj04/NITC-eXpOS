[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 7;

alias user_stack R0;
user_stack = SP;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13] = SP;

SP = 512*[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11] - 1; //we don't need the offset

alias syscall_num R1;  //-5
alias arg1 R2;  //-4
alias arg2 R3; //-3
//arg3
alias ret_val R4; //-1
//IP+2

syscall_num = [512*[PTBR + 2*(user_stack-5)/512] + (user_stack-5)%512];
arg1 = [512*[PTBR + 2*(user_stack-4)/512] + (user_stack-4)%512];
arg2 = [512*[PTBR + 2*(user_stack-3)/512] + (user_stack-3)%512];
ret_val = 512*[PTBR + 2*(user_stack-1)/512] + (user_stack-1)%512;

if(arg1 != -1) then
    [ret_val] = -1;
else
    multipush(R0, R1, R2, R3, R4);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE+1];
    //R3 remains same
    
    call DEVICE_MANAGER;

    multipop(R0, R1, R2, R3, R4);
    [ret_val] = 0;
endif;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];

ireturn;
