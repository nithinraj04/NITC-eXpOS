alias ret_val R0;
alias fn_num R1;
alias pid R2;

if(fn_num == 1) then //get free pcb entry
    R0 = 3;
    while(R0 < 15) do
        if([PROCESS_TABLE + 16*R0 + 4] == TERMINATED) then
            R1 = PROCESS_TABLE + 16*R0;
            [R1 + 1] = R0;
            [R1 + 4] = ALLOCATED;
            [R1 + 14] = PAGE_TABLE_BASE + 20*R0;
            [R1 + 15] = 10;
            return;
        endif;

        //R0 = R0 + 1;
        inline "INR R0";
    endwhile;

    R0 = -1;
    return;
endif;
            

if(fn_num == 2) then //Free user area page
    alias page_num R3;
    page_num = [PROCESS_TABLE + 16*pid + 11];

    alias resource_table R4;
    resource_table = page_num*512 + RESOURCE_TABLE_OFFSET;

    R5 = 0;
    while(R5 < 8) do
        if([resource_table + 2*R5] == SEMAPHORE) then
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 7; //Release semaphore
            R2 = [resource_table + 2*R5 + 1];
            R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
            call RESOURCE_MANAGER;
            multipop(R0, R1, R2, R3, R4, R5);
        endif;

        if([resource_table + 2*R5] == FILE) then
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4; //close file
            R2 = [resource_table + 2*R5 + 1];
            call FILE_MANAGER;
            multipop(R0, R1, R2, R3, R4, R5);
        endif;
        
        [resource_table + 2*R5] = -1;
        [resource_table + 2*R5 + 1] = -1;

        //R5 = R5 + 1;
        inline "INR R5";
    endwhile;

    multipush(R0, R1, R2, R3);
    R1 = 2; //Release page
    R2 = page_num;
    call MEMORY_MANAGER;
    multipop(R0, R1, R2, R3);
    return;
endif;

if(fn_num == 3) then //Exit process
    multipush(R0, R1, R2);
    R1 = 4; //Free page table
    R2 = pid;
    call PROCESS_MANAGER;
    multipop(R0, R1, R2);

    multipush(R0, R1, R2);
    R1 = 2; //Free user area page
    R2 = pid;
    call PROCESS_MANAGER;
    multipop(R0, R1, R2);

    [PROCESS_TABLE + 16*pid + 4] = TERMINATED;


    if([PROCESS_TABLE + 16*pid + 9] != 9) then //Not exec
        R3 = 0;
        while(R3 < 16) do
            R4 = PROCESS_TABLE + 16*R3;
            if([R4 + 4] == WAIT_PROCESS && [R4 + 5] == pid)
            then
                
                [R4 + 4] = READY;
            endif;

            if([R4 + 2] == pid) then
                [R4 + 2] = -1;
            endif;

            //R3 = R3+1;
            inline "INR R3";
        endwhile;
    endif;

    return;
endif;

if(fn_num == 4) then //Free page table
    alias ptbr R3;
    ptbr = [PROCESS_TABLE + 16*pid + 14];
    [ptbr + 0] = -1;
    [ptbr + 1] = "0000";
    [ptbr + 2] = -1;
    [ptbr + 3] = "0000";

    R4 = 4;

    while(R4 < 20) do
        if([ptbr + R4 + 1] != "0000") then
            multipush(R0, R1, R2, R3, R4);
            R1 = 2; //release page
            R2 = [ptbr + R4 + 0];
            call MEMORY_MANAGER;
            multipop(R0, R1, R2, R3, R4);

            [ptbr + R4 + 0] = -1;
            [ptbr + R4 + 1] = "0000";
        endif;

        R4 = R4 + 2;
    endwhile;

    R5 = DISK_MAP_TABLE + 10*pid;
    R6 = 2;
    while(R6 < 10) do
        if(R6 >= 4 && R6 < 8) then
            [R5 + R6] = -1;
            R6 = R6 + 1;
            continue;
        endif;
        if([R5 + R6] != -1) then
            multipush(R0, R1, R2, R3, R4, R5, R6);
            R1 = 4; //Release block
            R3 = pid;
            R2 = [R5 + R6];
            call MEMORY_MANAGER;
            multipop(R0, R1, R2, R3, R4, R5, R6);
            [R5 + R6] = -1;
        endif;
        //R6 = R6 + 1;
        inline "INR R6";
    endwhile;

    return;
endif;

if(fn_num == 5) then  //kill all
    //acquire inode on every file
    R3 = 0;
    while(R3 < MAX_FILE_NUM) do
        //I don't think we need to acquire inode for exec files, but whatever
        if([INODE_TABLE + 16*R3 + 1] != -1) then
            multipush(R1, R2, R3);
            R1 = ACQUIRE_INODE;
            R2 = R3;
            R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3);
        endif;

        //R3 = R3 + 1;
        inline "INR R3";
    endwhile;

    //exit each process
    R3 = 2;
    while(R3 < MAX_PROC_NUM) do
        if(R3 == SWAPPER_DAEMON || R3 == IDLE2_PROCESS) then
            //This is relevant only in stage 27 and ideally
            //shouldn't be implemented now. But since I know that I will forget
            //to do this in stage 27 (as it not mentioned in documentation), I 
            //am doing it here itself
            //R3 = R3 + 1;
            inline "INR R3";
            continue;
        endif;

        if(R3 != [SYSTEM_STATUS_TABLE + 5*CORE + 1] && [PROCESS_TABLE + 16*R3 + 4] != TERMINATED) then
            multipush(R1, R2, R3);
            R1 = EXIT_PROCESS;
            R2 = R3;
            call PROCESS_MANAGER;
            multipop(R1, R2, R3);
        endif;

        //R3 = R3 + 1;
        inline "INR R3";
    endwhile;

    R3 = 0;
    while(R3 < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*R3 + 1] != -1) then
            multipush(R1, R2, R3);
            R1 = RELEASE_INODE;
            R2 = R3;
            R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3);
        endif;

        //R3 = R3 + 1;
        inline "INR R3";
    endwhile;

    R0 = 0;
    return;
endif;
