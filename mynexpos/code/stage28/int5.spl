alias user_sp R1;
user_sp = SP;

alias ret_addr R2;
ret_addr = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias syscall_num R3;
syscall_num = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias arg1 R4;
arg1 = [[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

alias arg2 R5;
arg2 = [[PTBR + 2*(user_sp-3)/512]*512 + (user_sp-3)%512];

alias pid R6;
pid = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

alias resource_table R7;
resource_table = [PROCESS_TABLE + 16*pid + 11]*512 + RESOURCE_TABLE_OFFSET;

[PROCESS_TABLE + 16*pid + 9] = syscall_num;
SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

//----------------------fn definition----------------------------//

if(syscall_num == 2) then  //Open
    [PROCESS_TABLE + 16*pid + 13] = user_sp;

    R8 = 0;
    while(R8 < 8) do
        if([resource_table + 2*R8 + 0] == -1) then
            break;
        endif;

        R8 = R8 + 1;
    endwhile;

    if(R8 >= 8) then
        [ret_addr] = -3;
        goto return_to_user;
    endif;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = 3;  //open
    R2 = arg1;
    call FILE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8);

    if(R0 == -1 || R0 == -2) then
        [ret_addr] = R0;
        goto return_to_user;
    endif;

    [resource_table + 2*R8 + 0] = FILE;
    [resource_table + 2*R8 + 1] = R0;

    [ret_addr] = R8;
    goto return_to_user;
endif;


if(syscall_num == 3) then //close
    [PROCESS_TABLE + 16*pid + 13] = user_sp;
    
    if(arg1 < 0 || arg1 >= 8 || [resource_table + 2*arg1 + 0] != FILE) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;
    
    alias open_file_index R8;
    R8 = [resource_table + 2*arg1 + 1];

    multipush(R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = 4;  //close
    R2 = open_file_index;
    call FILE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8);
    
    [resource_table + 2*arg1 + 0] = -1;
    [resource_table + 2*arg1 + 1] = -1;

    [ret_addr] = -1;
    goto return_to_user;
endif;

if(syscall_num == 6) then  //seek
    if(arg1 < 0 || arg1 >= 8 || [resource_table + 2*arg1 + 0] != FILE) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias open_file_index R8;
    open_file_index = [resource_table + 2*arg1 + 1];

    alias inode_index R9;
    inode_index = [OPEN_FILE_TABLE + 4*open_file_index + 0];

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
    R1 = 4; //acquire inode
    R2 = inode_index;
    R3 = pid;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

    if(R0 == -1) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    alias lseek R10;
    lseek = [OPEN_FILE_TABLE + 4*open_file_index + 2];

    alias file_size R11;
    if(inode_index == INODE_ROOT) then
        file_size = 480;
    else
        file_size = [INODE_TABLE + 16*inode_index + 2];
    endif;

    if(lseek + arg2 < 0) then
        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
        R1 = 5;  //release inode
        R2 = inode_index;
        R3 = pid;
        call RESOURCE_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

        [ret_addr] = -2;
        goto return_to_user;
    endif;

    if(lseek + arg2 > file_size) then
        [OPEN_FILE_TABLE + 4*open_file_index + 2] = file_size;
    else
        [OPEN_FILE_TABLE + 4*open_file_index + 2] = lseek + arg2;
    endif;

    if(arg2 == 0) then
        [OPEN_FILE_TABLE + 4*open_file_index + 2] = 0;
    endif;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
    R1 = 5;  //release inode
    R2 = inode_index;
    R3 = pid;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

    if([OPEN_FILE_TABLE + 4*open_file_index + 2] == file_size) then
        [ret_addr] = -2;
    else
        [ret_addr] = 0;
    endif;
    goto return_to_user;
endif;


return_to_user:
    multipush(R1, R2); 
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1, R2);

    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;
    ireturn;
