[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 9] = -1;
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 13] = SP;

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 11]*512 - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

backup;
multipush(EIP);
multipush(EPN);

if(EC != 0) then
    if(EC == 1) then
        print "Illegal instruction";
        breakpoint;
    endif;
    if(EC == 2) then
        print "Illegal memory";
        breakpoint;
    endif;
    if(EC == 3) then
        print "Arithmetic exception";
        breakpoint;
    endif;
    if([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] >= 10*512-1) then
        print "User stack full";
        breakpoint;
    endif;

    R1 = 3; //exit process
    R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
    call PROCESS_MANAGER;
    
    multipush(R1, R2); 
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1, R2);

    call SCHEDULER;
    //This process will not be scheduled again, as it will be marked terminated
endif;

multipop(EPN);
multipush(EPN);  //Sometimes my genius, its almost frightening

if(EPN >= 4) then
    R5 = [DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + EPN];
    if(R5 == -1) then
        multipush(R1, R2, R5, R9);
        R1 = 3; //exit process
        R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
        call PROCESS_MANAGER;
        multipop(R1, R2, R5, R9);
        
        multipush(R1, R2);
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R1, R2);

        call SCHEDULER;
        //This process will not be scheduled again
        return;
    endif;
    
    multipush(R1, R2, R3, R4, R5, R9);
    R1 = 5; //get code page
    R2 = R5;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3, R4, R5, R9);
    
    multipop(EPN);
    multipush(EPN);

    [PTBR + 2*EPN] = R0;
    [PTBR + 2*EPN + 1] = "1100";

else //when page fault occured for heap
    multipush(R1, R2, R3, R4, R5, R9);
    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";

    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
    multipop(R1, R2, R3, R4, R5, R9);
endif;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 9] = 0;

multipop(EPN);
multipop(EIP);
restore;

multipush(R1, R2);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1, R2);

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 5*CORE + 1] + 13];
SP = SP+1;

[[PTBR + 2*SP/512]*512 + SP%512] = EIP;
    
ireturn;
