breakpoint;

alias user_sp R1;
user_sp = SP;

alias syscall_num R2;
syscall_num = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];

alias pid R3;
pid = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

[PROCESS_TABLE + 16*pid + 9] = syscall_num;

alias ret_addr R4;
ret_addr = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias arg1 R5;
arg1 = [[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

[PROCESS_TABLE + 16*pid + 13] = SP;
SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

//------------fn definitions start---------------//

if(syscall_num == 11) then //getPID
    //[ret_addr] = [PROCESS_TABLE + 16*pid + 1];
    [ret_addr] = pid;
    goto return_to_user;
endif;

if(syscall_num == 12) then //getPPID
    [ret_addr] = [PROCESS_TABLE + 16*pid + 2];
    goto return_to_user;
endif;

if(syscall_num == 13) then //wait
    //arg1 is pid
    if(arg1 < 0 || arg1 >= 16 || arg1 == pid) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    if([PROCESS_TABLE + 16*arg1 + 4] == TERMINATED) then
        [ret_addr] = -1;
        goto return_to_user;
    endif;

    [PROCESS_TABLE + 16*pid + 4] = WAIT_PROCESS;
    [PROCESS_TABLE + 16*pid + 5] = arg1;

    if(pid > 15) then
        print "before";
        breakpoint;
    endif;
    
    multipush(R1, R2, R3, R4, R5);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;

    call SCHEDULER;

    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1, R2, R3, R4, R5);

    if(pid > 15) then
        print "after";
        breakpoint;
    endif;

    [ret_addr] = 0;
    goto return_to_user;
endif;

if(syscall_num == 14) then //signal
    R6 = 0;
    while(R6 < 16) do
        if([PROCESS_TABLE + 16*R6 + 4] == WAIT_PROCESS
            &&
           [PROCESS_TABLE + 16*R6 + 5] == pid
        ) then
            
            [PROCESS_TABLE + 16*R6 + 4] = READY;
        endif;

        R6 = R6 + 1;
    endwhile;
    
    goto return_to_user;
endif;

return_to_user:
    if(pid > 15) then
        print "before tf?";
        print syscall_num;
    endif;

    multipush(R1, R2, R3, R4, R5);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1, R2, R3, R4, R5);

    if(pid > 15) then
        print "Why tf?";
        breakpoint;
    endif;

    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;

    ireturn;
