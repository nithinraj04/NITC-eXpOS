alias user_sp R1;
user_sp = SP;

alias pid R2;
pid = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

alias user_id R3;
user_id = [SYSTEM_STATUS_TABLE];

[PROCESS_TABLE + 16*pid + 9] = 21; //Shutdown syscall no is 21
[PROCESS_TABLE + 16*pid + 13] = user_sp;

SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

if(pid != 2 || user_id != 1) then
    [[PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512] = -1;
    [PROCESS_TABLE + 16*pid + 9] = 0;
    SP = user_sp;
    ireturn;
endif;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

reset;

multipush(R1, R2);
R1 = RELEASE_LOCK;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R1, R2);

//kill all user processes
multipush(R1, R2, R3);
R1 = 5;  //kill all
R2 = pid;
call PROCESS_MANAGER;
multipop(R1, R2, R3);

R4 = 0;
while(R4 < MAX_BUFFER) do
    if([BUFFER_TABLE + 4*R4 + 1] == 1) then
        multipush(R1, R2, R3, R4);
        R1 = DISK_STORE;
        R2 = pid;
        R3 = BUFFER_BASE + R4;  //page no
        R4 = [BUFFER_TABLE + 4*R4];  //block no
        call DEVICE_MANAGER;
        multipop(R1, R2, R3, R4);
    endif;
    
    R4 = R4 + 1;
endwhile;

R4 = 0;
while(R4 < MAX_FILE_NUM) do
    [INODE_TABLE + 16*R4 + 5] = -1;
    inline "INR R4";
endwhile;


//store Inode table and user table
multipush(R1, R2, R3);
R1 = 1;
R2 = pid; //pid is R2
R3 = 59; //page no
R4 = 3; //block no
call DEVICE_MANAGER;
multipop(R1, R2, R3);

multipush(R1, R2, R3);
R1 = 1;
R2 = pid; //pid is R2
R3 = 60; //page no
R4 = 4; //block no
call DEVICE_MANAGER;
multipop(R1, R2, R3);

//Store root file
multipush(R1, R2, R3);
R1 = 1;
R2 = pid; //pid is R2
R3 = 62; //page no
R4 = 5; //block no
call DEVICE_MANAGER;
multipop(R1, R2, R3);

//Store disk free list
multipush(R1, R2, R3);
R1 = 1;
R2 = pid; //pid is R2
R3 = 61; //page no
R4 = 2; //block no
call DEVICE_MANAGER;
multipop(R1, R2, R3);

halt;
