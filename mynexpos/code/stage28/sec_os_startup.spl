//IDLE2 INITIALIZATION
PTBR = PAGE_TABLE_BASE + 14*20;

[PTBR+0] = -1;
[PTBR+1] = "0000";  // Ref Valid Write Dirty
[PTBR+2] = -1;
[PTBR+3] = "0000";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 69;  //same as idle
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 83;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

R0 = PROCESS_TABLE + 14*16;
[R0 + 0] = 0;
[R0 + 1] = 14;
[R0 + 3] = 0;  //kernel
[R0 + 4] = RUNNING;
[R0 + 11] = 84;
[R0 + 12] = 0;
[R0 + 13] = 8*512;
[R0 + 14] = PAGE_TABLE_BASE + 14*20;
[R0 + 15] = 10;

[83*512] = [69*512 + 1];

SP = 8*512;
PTBR = PAGE_TABLE_BASE + 14*20;
PTLR = 10;

[ACCESS_LOCK_TABLE + 3] = 0;
[ACCESS_LOCK_TABLE + 4] = 0;
[ACCESS_LOCK_TABLE + 5] = 0;
[ACCESS_LOCK_TABLE + 6] = 0;

print "END SEC OS";
breakpoint;
ireturn;
