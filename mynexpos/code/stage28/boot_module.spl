//load disk free list
loadi(61,2);

//load inode table (and user table)
loadi(59,3);
loadi(60,4);

//load root file
loadi(62,5);

//load library
loadi(63,13);
loadi(64,14);

//load exception
loadi(2,15);
loadi(3,16);

//load timer
loadi(4,17);
loadi(5,18);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load int 4
loadi(10, 23);
loadi(11, 24);

//load int 5
loadi(12, 25);
loadi(13, 26);

//load int 6
loadi(14,27);
loadi(15,28);

//load int7
loadi(16,29);
loadi(17,30);

//load int8
loadi(18,31);
loadi(19,32);

//load int 9 (exec)
loadi(20,33);
loadi(21,34);

//load int10
loadi(22,35);
loadi(23,36);

//load int11
loadi(24,37);
loadi(25,38);

//load int12
loadi(26,39);
loadi(27,40);

//load int13
loadi(28,41);
loadi(29,42);

//load int14
loadi(30,43);
loadi(31,44);

//load int15
loadi(32,45);
loadi(33,46);

//load int16
loadi(34,47);
loadi(35,48);

//load int17
loadi(36,49);
loadi(37,50);

//load module 0 (resource manager)
loadi(40,53);
loadi(41,54);


//load module 1 (process manager)
loadi(42,55);
loadi(43,56);

//load module 2 (memory manager)
loadi(44,57);
loadi(45,58);

//load module 3 (file manager)
loadi(46, 59);
loadi(47, 60);

//load module 4 (device manager)
loadi(48,61);
loadi(49,62);

//load module 5 (scheduler)
loadi(50,63);
loadi(51,64);

//load module 6 (pager)
loadi(52,65);
loadi(53,66);

//load init
loadi(65,7);
//loadi(66,8);

//load shell
loadi(67,9);
loadi(68,10);

// -------------------------------------------------- //

//set memory free list
R0 = 0;
while(R0 <= 84) do
    //76 to 80 are the pages used for idle, init and shell
    //One for kernel stack of idle
    //One for kernel stack of init
    //Three for shell's 2xUser_stack and 1xKernel_stack
    //81 and 82 are used for user & kernel stacks of swapper daemon
    //83 and 84 are used for user & kernel stacks of IDLE2
    [MEMORY_FREE_LIST + R0] = 1;
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

//Initialize system status table
[SYSTEM_STATUS_TABLE + 0] = 0; //kernel
[SYSTEM_STATUS_TABLE + 2] = 43;  //mem free count
[SYSTEM_STATUS_TABLE + 3] = 0;  //mem wait count
[SYSTEM_STATUS_TABLE + 4] = 0;  //swapped count
[SYSTEM_STATUS_TABLE + 5] = 0; //Paging status
[SYSTEM_STATUS_TABLE + 6] = 14;  //PID 2
[SYSTEM_STATUS_TABLE + 7] = 0;  //logout status

//Initialize access lock table
[ACCESS_LOCK_TABLE + 0] = 0; //Kernel lock
[ACCESS_LOCK_TABLE + 1] = 0; //Scheduler lock

//Initialize terminal status table
[TERMINAL_STATUS_TABLE] = 0;

//Initialize disk status table
[DISK_STATUS_TABLE] = 0;

//Initialize semaphore table
R0 = 0;
while(R0 < 32) do
    R1 = SEMAPHORE_TABLE + 4*R0;
    [R1 + 0] = -1; //locking pid
    [R1 + 1] = 0; //no: of sharing processes
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

//Initialize file status table
R0 = 0;
while(R0 < 60) do
    R1 = FILE_STATUS_TABLE + 4*R0;
    [R1 + 0] = -1;  //locking pid
    [R1 + 1] = -1;  //File open count
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

//Initialize open file table
R0 = 0;
while(R0 < MAX_OPENFILE_NUM) do
    R1 = OPEN_FILE_TABLE + 4*R0;
    [R1 + 0] = -1;  //inode index
    [R1 + 1] = 0;  //Open instance count
    [R1 + 2] = 0;  //lseek
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

//Initialize buffer table
R0 = 0;
while(R0 < 4) do
    R1 = BUFFER_TABLE + 4*R0;
    [R1 + 0] = -1; //block no
    [R1 + 1] = 0;  //dirty bit
    [R1 + 2] = -1; //locking pid
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

//----------------initialization of init (login) process----------------------//

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[66*512] = [65*512 + 1];  //Store IP on TOS

//Process table entries for init (login)
R0 = PROCESS_TABLE + 16;
[R0+1] = 1;
[R0+3] = 0; //kernel
[R0+4] = CREATED;
[R0+11] = 77; //User area
[R0+12] = 0; //kernel stack (offset)
[R0+13] = 8*512;  //user stack
[R0+14] = PAGE_TABLE_BASE+20; //PTBR
[R0+15] = 10; //PTLR

//Resorce table entries for init
R0 = 70*512 + RESOURCE_TABLE_OFFSET;
R1 = 0;
while(R1 < 16) do
    [R0 + R1] = -1;
    //R1 = R1 + 1;
    inline "INR R1";
endwhile;

//-------------------end of init (login) initialization-----------------------//


//-----------------------initialization of shell------------------------------//
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

[78*512] = [67*512 + 1];  //Store IP on TOS

//Process table entries for init (login)
R0 = PROCESS_TABLE + 2*16;
[R0+1] = 2; //pid
[R0+2] = 1; //ppid (login process)
[R0+3] = 0; //kernel (until login)
[R0+4] = TERMINATED;
[R0+11] = 80; //User area
[R0+12] = 0; //kernel stack (offset)
[R0+13] = 8*512;  //user stack
[R0+14] = PAGE_TABLE_BASE+40; //PTBR
[R0+15] = 10; //PTLR

//Resorce table entries for init
R0 = 80*512 + RESOURCE_TABLE_OFFSET;
R1 = 0;
while(R1 < 16) do
    [R0 + R1] = -1;
    //R1 = R1 + 1;
    inline "INR R1";
endwhile;

//disk map table entries for init (not needed anymore)
R0 = 2;
while(R0 < 10) do
    [DISK_MAP_TABLE + 10 + R0] = -1;
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

[DISK_MAP_TABLE + 20 + 4] = 67;
[DISK_MAP_TABLE + 20 + 5] = 68;
//-------------------end of init (login) initialization-----------------------//



//set every other process table entry to TERMINATED
R0 = 3;
while(R0 < MAX_PROC_NUM) do
    R1 = PROCESS_TABLE + 16*R0;
    [R1] = 0;  //TICK
    [R1 + 4] = TERMINATED;
    //R0 = R0 + 1;
    inline "INR R0";
endwhile;

return;
